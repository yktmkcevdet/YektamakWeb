@page "/Proje/"
@attribute [Authorize(Policy = "ProjeTasarimMuhendisiOnly")]
@using BlazorApp1.Features.Commands.Account.Login
@using Microsoft.AspNetCore.Components.Rendering
@using Models
@using Requests
@using System.Data
@using Utilities
@using YektamakWeb.Components.Dialogs


<div class="container">
    <h3>Proje Dosyaları</h3>
    <PageTitle>Proje Dosyaları</PageTitle>
    <div class="row">
        <div class="col-sm-4">
            <button type="button" class="btn btn-primary flex-column" @onclick="OpenDialog">
                Proje Dosyaları Yükle
            </button>
        </div>
        <div class="col-sm-4">
            <ThemeSwitcher />
        </div>
    </div>

    <table class="table-responsive">
        <tr>
            <td>
                <label class="flex-column">Proje Kodu</label>
            </td>
            <td>
                <select class="flex-column" @bind="selectedProjeId" @bind:after="GetProjeDosyalari">
                    <option value="" selected disabled>Seçim Yapınız</option>
                    @foreach (var item in _constants.Projes())
                    {
                        <option value="@item.Id">@item.kod</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label class="flex-column" style="width:max-content">Parça Grubu</label>
            </td>
            <td>
                <select class="flex-column" @bind="selectedParcaGrupId" @bind:after="GetProjeDosyalari">
                    <option value="" selected disabled>Seçim Yapınız</option>
                    @foreach (var item in parcaGrup)
                    {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label class="flex-column" style="width:max-content">Malzeme Grubu</label>
            </td>
            <td>
                <select class="flex-column" @bind="selectedMalzemeGrupId" @bind:after="GetProjeDosyalari">
                    <option value="" selected disabled>Seçim Yapınız</option>
                    @foreach (var item in malzemeGrup)
                    {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label class="flex-column" style="width:max-content">Parça Adı</label>
            </td>
            <td>
                <input class="flex-column" @bind="parcaAdi" @bind:after="GetProjeDosyalari">
                        
                </input>
            </td>
        </tr>
    </table>
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center align-items-center overlay">
            <div class="spinner-border text-primary" role="status"></div>
        </div>
    }

<br />

@if (stokKarts == null)
{
    <p>Veriler yükleniyor...</p>
}
else if (stokKarts.Count<StokKart>() == 0)
{
    <p>Gösterilecek veri bulunamadı.</p>
}
else
{
        <table class="table table-striped">
            <thead>
                <tr>
                    <th id="stokKartId">Ürün ID</th>
                    <th>Proje Kodu</th>
                    <th>Ürün Kodu</th>
                    <th>Ürün Adı</th>
                    <th>pdf</th>
                    <th>dxf</th>
                    <th>step</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stokKart in stokKarts)
                {
                    <tr>
                        <td>@stokKart.Id</td>
                        <td>@stokKart.proje.kod</td>
                        <td>@stokKart.kod</td>
                        <td>@stokKart.ad</td>
                        <td class="image-cell" @onclick="()=>PdfGoster(stokKart.Id)" style="cursor: pointer;">
                            <img src="/pdf.png" alt="Default Image" class="default-image" />
                        </td>
                        <td class="image-cell" @onclick="()=>PdfGoster(stokKart.Id)" style="cursor: pointer;">
                            <img src="/pdf.png" alt="Default Image" class="default-image" />
                        </td>
                        <td class="image-cell" @onclick="()=>PdfGoster(stokKart.Id)" style="cursor: pointer;">
                            <img src="/pdf.png" alt="Default Image" class="default-image" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
}
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger mt-3">
        @message
    </div>
}
</div>
<PdfView @ref="pdfViewer" />
<DialogFragment @ref="dialogFragment">@renderFragment()</DialogFragment> 
@code {
    @inject ProgramConst _constants
    @inject UserSession _userSession
    [Inject]
    private NavigationManager? navigation { get; set; }
    private PdfView pdfViewer;
    private string message;
    private bool IsLoading;
    private int selectedProjeId;
    private int stokKartId;
    private int selectedParcaGrupId;
    private int selectedMalzemeGrupId;
    private string parcaAdi=string.Empty;
    Dictionary<int, string> parcaGrup = new Dictionary<int, string>();
    Dictionary<int, string> malzemeGrup = new Dictionary<int, string>();
    private DialogFragment? dialogFragment;
    private RenderFragment renderFragment() => __builder =>
    {
        __builder.OpenComponent(0, typeof(ProjeDosyalariAl));
        __builder.CloseComponent();
    };
    private void OpenDialog()
    {
        dialogFragment?.ShowDialog();
    }
    public List<StokKart> stokKarts = new List<StokKart>();

    protected override void OnInitialized()
    {
    }
    private async Task GetProjeDosyalari()
    {
        IsLoading = true;
        stokKarts = new List<StokKart>();
        try
        {
            // API çağrısı yap
            StokKart stokKart = new StokKart();
            stokKart.proje.Id = selectedProjeId;
            stokKart.parcaGrup.Id = selectedParcaGrupId;
            stokKart.ad = parcaAdi;
            stokKart.malzemeGrup.Id = selectedMalzemeGrupId;
            string serializeString = await WebMethods.GetStokKart(stokKart);
            DataSet dataSet = GlobalData.JsonStringToDataSet(serializeString);
            if (dataSet != null)
            {
                foreach (DataRow dataRow in dataSet.Tables[0].Rows)
                {
                    stokKart = GlobalData.DataRowToModel<StokKart>(dataRow);
                    stokKarts.Add(stokKart);
                    if (parcaGrup.Count(id => id.Key == stokKart.parcaGrup.Id) == 0)
                    {
                        parcaGrup.Add(stokKart.parcaGrup.Id, stokKart.parcaGrup.kod);
                    }
                    if (malzemeGrup.Count(id => id.Key == stokKart.malzemeGrup.Id) == 0)
                    {
                        malzemeGrup.Add(stokKart.malzemeGrup.Id, stokKart.malzemeGrup.ad);
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            message = $"Veri çekme hatası: {ex.Message}";
            IsLoading = false;
        }
    }

    private async void PdfGoster(long stokKartId)
    {
        StokKart stokKart = new StokKart();
        stokKart.Id = stokKartId;
        string serializeString = await WebMethods.GetStokKartPdf(stokKart);
        DataSet dataSet = GlobalData.JsonStringToDataSet(serializeString);
        if (dataSet != null)
        {
            foreach (DataRow dataRow in dataSet.Tables[0].Rows)
            {
                stokKart = GlobalData.DataRowToModel<StokKart>(dataRow);
            }
        }
        
        if (pdfViewer != null)
        {
            //await JSRuntime.InvokeVoidAsync("openPdfBlob", stokKart.pdf);
            pdfViewer.Open($"data:application/pdf;base64,{Convert.ToBase64String(stokKart.pdf)}");
        }
        
        //dialogFragment.ShowDialog();
    }
   
    private void OpenPage(string page)
    {
        navigation?.NavigateTo(char.ToUpper(page[0]) + page.Substring(1).ToLower());
    }

}
